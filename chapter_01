   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[[0., 0., 0., 0.],\n",
       "         [0., 0., 0., 0.],\n",
       "         [0., 0., 0., 0.]],\n",
       "\n",
       "        [[0., 0., 0., 0.],\n",
       "         [0., 0., 0., 0.],\n",
       "         [0., 0., 0., 0.]]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.zeros((2,3,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eb4ba886",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[[1., 1., 1., 1.],\n",
       "         [1., 1., 1., 1.],\n",
       "         [1., 1., 1., 1.]],\n",
       "\n",
       "        [[1., 1., 1., 1.],\n",
       "         [1., 1., 1., 1.],\n",
       "         [1., 1., 1., 1.]]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.ones((2,3,4))"
   ]
  }

  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "96fd849d",
   "metadata": {},
   "source": [
    "torch支持按元素计算矩阵"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "57ea8f98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(tensor([3., 4., 5., 6.]),\n",
       " tensor([-1.,  0.,  1.,  2.]),\n",
       " tensor([2., 4., 6., 8.]),\n",
       " tensor([0.5000, 1.0000, 1.5000, 2.0000]),\n",
       " tensor([ 1.,  4.,  9., 16.]),\n",
       " tensor([ 2.7183,  7.3891, 20.0855, 54.5981]))"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=torch.tensor([1.0,2,3,4])\n",
    "y=torch.tensor([2,2,2,2])\n",
    "x+y, x-y, x*y, x/y, x**y, torch.exp(x)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "55389c69",
   "metadata": {},
   "source": [
    "torch支持对tensor进行合并\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "11ced0ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.,  1.,  2.,  3.,  1.,  1.,  1.,  1.],\n",
       "        [ 4.,  5.,  6.,  7.,  1.,  1.,  1.,  1.],\n",
       "        [ 8.,  9., 10., 11.,  1.,  1.,  1.,  1.]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=torch.arange(12, dtype=torch.float32).reshape(3,4)\n",
    "y=torch.ones(3,4)\n",
    "torch.cat((x,y), dim=1) #按列堆积, 最后保持行数不变"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9d3a0ef7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(tensor([[ 0.,  1.,  2.,  3.],\n",
       "         [ 4.,  5.,  6.,  7.],\n",
       "         [ 8.,  9., 10., 11.],\n",
       "         [ 1.,  1.,  1.,  1.],\n",
       "         [ 1.,  1.,  1.,  1.],\n",
       "         [ 1.,  1.,  1.,  1.]]),\n",
       " tensor([[ 0.,  1.,  2.,  3.],\n",
       "         [ 4.,  5.,  6.,  7.],\n",
       "         [ 8.,  9., 10., 11.],\n",
       "         [ 1.,  1.,  1.,  1.],\n",
       "         [ 1.,  1.,  1.,  1.],\n",
       "         [ 1.,  1.,  1.,  1.]]))"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.cat((x,y),dim=0),torch.cat((x,y),dim=-2)# 按行堆积, 最后保证列数不变"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c83174c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(tensor([[[ 0.,  1.],\n",
       "          [ 2.,  3.],\n",
       "          [ 4.,  5.]],\n",
       " \n",
       "         [[ 6.,  7.],\n",
       "          [ 8.,  9.],\n",
       "          [10., 11.]]]),\n",
       " tensor([[[1., 1.],\n",
       "          [1., 1.],\n",
       "          [1., 1.]],\n",
       " \n",
       "         [[1., 1.],\n",
       "          [1., 1.],\n",
       "          [1., 1.]]]),\n",
       " tensor([[[ 0.,  1.,  1.,  1.],\n",
       "          [ 2.,  3.,  1.,  1.],\n",
       "          [ 4.,  5.,  1.,  1.]],\n",
       " \n",
       "         [[ 6.,  7.,  1.,  1.],\n",
       "          [ 8.,  9.,  1.,  1.],\n",
       "          [10., 11.,  1.,  1.]]]))"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=x.reshape(2,3,2)\n",
    "y=y.reshape(2,3,2)\n",
    "x,y,torch.cat((x,y),dim=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3c78b8ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(66.)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
 ],
   "source": [
    "x.sum() #对元素进行求和"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "6bd8b5bb",
   "metadata": {},
   "source": [
    "**tensor的广播机制**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "19922b58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(tensor([[0],\n",
       "         [1],\n",
       "         [2]]),\n",
       " tensor([[0, 1, 2]]))"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=torch.arange(3).reshape(3,1)\n",
    "b=torch.arange(3).reshape((1,3))\n",
    "a,b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bd493e26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[0, 1, 2],\n",
       "        [1, 2, 3],\n",
       "        [2, 3, 4]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a+b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c0cd3728",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(tensor([0, 1, 2]), tensor([0]))"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[:,0],a[0,:]# 区分行与列"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "864b050a",
   "metadata": {},
   "source": [
    "执行原地操作, 不占用新的内存"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "188a6056",
   "metadata": {},
   "outputs": [],
   "source": [
    "y=torch.arange(12).reshape((3,4))\n",
    "z=torch.zeros_like(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "211e57df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "before=id(z)\n",
    "z=z+y\n",
    "id(z)==before"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0ad29ce6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "before=id(z)\n",
    "z[:]=z+y #这种方法可以不占新的内存\n",
    "id(z)==before"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "034c649c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z+=y\n",
    "id(z)==before"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "38517017",
   "metadata": {},
   "source": [
    "**Numpy和Torch的相互转换**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "117d9ff2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[ 0,  3,  6,  9],\n",
       "        [12, 15, 18, 21],\n",
       "        [24, 27, 30, 33]], dtype=int64),\n",
       " numpy.ndarray,\n",
       " tensor([[ 0,  3,  6,  9],\n",
       "         [12, 15, 18, 21],\n",
       "         [24, 27, 30, 33]]),\n",
       " torch.Tensor)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A=z.numpy()\n",
    "B=torch.tensor(A)\n",
    "A,type(A),B, type(B)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "0969aab4",
   "metadata": {},
   "source": [
    "****"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a9744a69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Tensor, 3.5, float, 3.5, 3)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=torch.tensor([3.5])\n",
    "type(a),a.item(), type(a.item()), float(a), int(a)"
   ]
  }
{
   "attachments": {},
   "cell_type": "markdown",
   "id": "34b8cb93",
   "metadata": {},
   "source": [
    "**数据预处理**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2c9110b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "os.makedirs(os.path.join('..','李沐_动手学深度学习','data'),exist_ok=True)#.. 表示在桌面创建\n",
    "data_file=os.path.join('..','李沐_动手学深度学习', 'data', 'house_tiny.csv')\n",
    "with open(data_file, 'w') as f:\n",
    "    f.write('NumRooms, Alley, Price\\n')\n",
    "    f.write('NA, Pave, 127\\n')\n",
    "    f.write('2,NA,100\\n')\n",
    "    f.write('4,NA,178\\n')\n",
    "    f.write('NA,NA,140\\n')\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "5a639ad8",
   "metadata": {},
   "source": [
    "**从创建的CSV文件中加载数据**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f6417f00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NumRooms</th>\n",
       "      <th>Alley</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Pave</td>\n",
       "      <td>127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>140</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   NumRooms  Alley   Price\n",
       "0       NaN   Pave     127\n",
       "1       2.0    NaN     100\n",
       "2       4.0    NaN     178\n",
       "3       NaN    NaN     140"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "data=pd.read_csv(data_file)\n",
    "data"
   ]
  }
